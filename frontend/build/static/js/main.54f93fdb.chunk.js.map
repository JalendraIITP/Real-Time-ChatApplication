{"version":3,"sources":["Context/ChatProvider.js","components/Authentication/Login.js","components/Authentication/Signup.js","Pages/Homepage.js","components/SingleChat.js","config/ChatLogics.js","components/ScrollableChat.js","components/miscellaneous/ProfileModal.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/MyChats.js","components/miscellaneous/SideDrawer.js","Pages/Chatpage.js","App.js","index.js"],"names":["ChatContext","createContext","ChatState","useContext","ChatProvider","children","useState","selectedChat","setSelectedChat","user","setUser","notification","setNotification","chats","setChats","history","useHistory","useEffect","userInfo","JSON","parse","localStorage","getItem","push","Provider","value","Login","show","setShow","toast","useToast","email","setEmail","password","setPassword","loading","setLoading","submitHandler","a","title","status","duration","isClosable","position","axios","post","withCredentials","data","setItem","stringify","description","response","message","spacing","id","isRequired","type","placeholder","onChange","e","target","size","width","h","onClick","colorScheme","style","marginTop","isLoading","variant","Signup","handleClick","name","setName","confirmpassword","setConfirmpassword","pic","setPic","picLoading","setPicLoading","dataA","FormData","append","headers","p","accept","files","Homepage","socket","selectedChatCompare","maxW","centerContent","d","justifyContent","bg","w","m","borderRadius","borderWidth","fontSize","fontFamily","isFitted","mb","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","ScrollableChat","map","display","label","placement","hasArrow","mt","mr","cursor","src","backgroundColor","marginLeft","padding","maxWidth","content","ProfileModal","useDisclosure","isOpen","onOpen","onClose","base","icon","View","isCentered","flexDir","alignItems","boxSize","alt","md","UserBadgeItem","handleFunction","admin","px","py","Close","pl","UserListItem","_hover","background","color","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleSearch","query","get","handleRename","put","chatId","chatName","handleAddUser","user1","find","u","groupAdmin","handleRemove","maxH","flexWrap","pb","ml","overflow","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","emit","sendMessage","event","key","io","on","newMessageRecieved","chat","includes","ArrowBack","isGroupChat","toUpperCase","overflowY","alignSelf","margin","className","onKeyDown","lastTypingTime","Date","getTime","setTimeout","Chatbox","ChatLoading","height","GroupChatModal","selectedUsers","setSelectedUsers","handleSubmit","delUser","filter","sel","slice","userToAdd","MyChats","setLoggedUser","fetchChats","lg","rightIcon","Add","latestMessage","substring","SideDrawer","loadingChat","setLoadingChat","accessChat","c","count","effect","Effect","SCALE","Bell","notif","n","as","Button","ChevronDown","removeItem","borderBottomWidth","User","Chatpage","App","path","component","exact","container","document","getElementById","createRoot","render"],"mappings":"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","file":"static/js/main.54f93fdb.chunk.js","sourcesContent":["import React, { createContext, useContext, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst ChatContext = createContext();\r\n\r\nconst ChatProvider = ({ children }) => {\r\n  const [selectedChat, setSelectedChat] = useState();\r\n  const [user, setUser] = useState();\r\n  const [notification, setNotification] = useState([]);\r\n  const [chats, setChats] = useState();\r\n\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const userInfo = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    setUser(userInfo);\r\n\r\n    if (!userInfo) history.push(\"/\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <ChatContext.Provider\r\n      value={{\r\n        selectedChat,\r\n        setSelectedChat,\r\n        user,\r\n        setUser,\r\n        notification,\r\n        setNotification,\r\n        chats,\r\n        setChats,\r\n      }}\r\n    >\r\n      {children}\r\n    </ChatContext.Provider>\r\n  );\r\n};\r\n\r\nexport const ChatState = () => {\r\n  return useContext(ChatContext);\r\n};\r\n\r\nexport default ChatProvider;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nconst Login = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const [email, setEmail] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const history = useHistory();\r\n  const { setUser } = ChatState();\r\n\r\n  const submitHandler = async () => {\r\n    setLoading(true);\r\n    if (!email || !password) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"http://localhost:8000/api/user/login\",\r\n        {email: email, password: password},{\r\n          withCredentials: true\r\n        }\r\n      );\r\n      toast({\r\n        title: \"Login Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setUser(data.user);\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data.user));\r\n      setLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message ,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"10px\">\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          value={email}\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            value={password}\r\n            onChange={(e) => setPassword(e.target.value)}\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter password\"\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={loading}\r\n      >\r\n        Login\r\n      </Button>\r\n      <Button\r\n        variant=\"solid\"\r\n        colorScheme=\"red\"\r\n        width=\"100%\"\r\n        onClick={() => {\r\n          setEmail(\"guest@example.com\");\r\n          setPassword(\"123456\");\r\n        }}\r\n      >\r\n        Get Guest User Credentials\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\r\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\r\nimport { VStack } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst Signup = () => {\r\n  const [show, setShow] = useState(false);\r\n  const handleClick = () => setShow(!show);\r\n  const toast = useToast();\r\n  const history = useHistory();\r\n\r\n  const [name, setName] = useState();\r\n  const [email, setEmail] = useState();\r\n  const [confirmpassword, setConfirmpassword] = useState();\r\n  const [password, setPassword] = useState();\r\n  const [pic, setPic] = useState();\r\n  const [picLoading, setPicLoading] = useState(false);\r\n\r\n  const submitHandler = async () => {\r\n    setPicLoading(true);\r\n    if (!name || !email || !password || !confirmpassword) {\r\n      toast({\r\n        title: \"Please Fill all the Feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n      return;\r\n    }\r\n    if (password !== confirmpassword) {\r\n      toast({\r\n        title: \"Passwords Do Not Match\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n    const dataA = new FormData();\r\n    dataA.append('file', pic);\r\n    dataA.append('name', name);\r\n    dataA.append('password', password);\r\n    dataA.append('email', email);\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        \"http://localhost:8000/api/user/register\",\r\n        dataA,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n          },\r\n          withCredentials: true\r\n        }\r\n      );\r\n      toast({\r\n        title: \"Registration Successful\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      localStorage.setItem(\"userInfo\", JSON.stringify(data.user));\r\n      setPicLoading(false);\r\n      history.push(\"/chats\");\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setPicLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <VStack spacing=\"5px\">\r\n      <FormControl id=\"first-name\" isRequired>\r\n        <FormLabel>Name</FormLabel>\r\n        <Input\r\n          placeholder=\"Enter Your Name\"\r\n          onChange={(e) => setName(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"email\" isRequired>\r\n        <FormLabel>Email Address</FormLabel>\r\n        <Input\r\n          type=\"email\"\r\n          placeholder=\"Enter Your Email Address\"\r\n          onChange={(e) => setEmail(e.target.value)}\r\n        />\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Enter Password\"\r\n            onChange={(e) => setPassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"password\" isRequired>\r\n        <FormLabel>Confirm Password</FormLabel>\r\n        <InputGroup size=\"md\">\r\n          <Input\r\n            type={show ? \"text\" : \"password\"}\r\n            placeholder=\"Confirm password\"\r\n            onChange={(e) => setConfirmpassword(e.target.value)}\r\n          />\r\n          <InputRightElement width=\"4.5rem\">\r\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\r\n              {show ? \"Hide\" : \"Show\"}\r\n            </Button>\r\n          </InputRightElement>\r\n        </InputGroup>\r\n      </FormControl>\r\n      <FormControl id=\"pic\">\r\n        <FormLabel>Upload your Picture</FormLabel>\r\n        <Input\r\n          type=\"file\"\r\n          p={1.5}\r\n          accept=\"image/*\"\r\n          onChange={(e) => setPic(e.target.files[0])}\r\n        />\r\n      </FormControl>\r\n      <Button\r\n        colorScheme=\"blue\"\r\n        width=\"100%\"\r\n        style={{ marginTop: 15 }}\r\n        onClick={submitHandler}\r\n        isLoading={picLoading}\r\n      >\r\n        Sign Up\r\n      </Button>\r\n    </VStack>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import {\r\n  Box,\r\n  Container,\r\n  Tab,\r\n  TabList,\r\n  TabPanel,\r\n  TabPanels,\r\n  Tabs,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport { useEffect } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nimport Login from \"../components/Authentication/Login\";\r\nimport Signup from \"../components/Authentication/Signup\";\r\n\r\nfunction Homepage() {\r\n  const history = useHistory();\r\n\r\n  useEffect(() => {\r\n    const user = JSON.parse(localStorage.getItem(\"userInfo\"));\r\n    if (user) history.push(\"/chats\");\r\n  }, [history]);\r\n\r\n  return (\r\n    <Container maxW=\"xl\" centerContent>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"center\"\r\n        p={3}\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        m=\"40px 0 15px 0\"\r\n        borderRadius=\"lg\"\r\n        borderWidth=\"1px\"\r\n      >\r\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\r\n          Chat App\r\n        </Text>\r\n      </Box>\r\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\r\n        <Tabs isFitted variant=\"soft-rounded\">\r\n          <TabList mb=\"1em\">\r\n            <Tab>Login</Tab>\r\n            <Tab>Sign Up</Tab>\r\n          </TabList>\r\n          <TabPanels>\r\n            <TabPanel>\r\n              <Login />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <Signup />\r\n            </TabPanel>\r\n          </TabPanels>\r\n        </Tabs>\r\n      </Box>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Homepage;\r\n","import \"./styles.css\";\r\nimport axios from \"axios\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport ScrollableChat from \"./ScrollableChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\nimport { FormControl } from \"@chakra-ui/form-control\";\r\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\r\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\r\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\r\nimport {IconButton, Spinner, useToast } from \"@chakra-ui/react\";\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\n\r\nimport io from \"socket.io-client\";\r\nconst ENDPOINT = \"http://localhost:8000\"; \r\nvar socket, selectedChatCompare;\r\n\r\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [socketConnected, setSocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [istyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user, notification, setNotification } = ChatState();\r\n\r\n  const fetchMessages = async () => {\r\n    if (!selectedChat) return;\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await axios.get(\r\n        `http://localhost:8000/api/message/${selectedChat._id}`,\r\n        {\r\n          withCredentials: true\r\n        }\r\n      );\r\n      setMessages(data);\r\n      setLoading(false);\r\n\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Messages\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = async (event) => {\r\n    if (event.key === \"Enter\" && newMessage) {\r\n      socket.emit(\"stop typing\", selectedChat._id);\r\n      try {\r\n        setNewMessage(\"\");\r\n        const { data } = await axios.post(\r\n          \"http://localhost:8000/api/message\",\r\n          {\r\n            content: newMessage,\r\n            chatId: selectedChat,\r\n          },\r\n          {\r\n            withCredentials: true\r\n          }\r\n        );\r\n        socket.emit(\"new message\", data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n        toast({\r\n          title: \"Error Occured!\",\r\n          description: \"Failed to send the Message\",\r\n          status: \"error\",\r\n          duration: 5000,\r\n          isClosable: true,\r\n          position: \"bottom\",\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit(\"setup\", user);\r\n    socket.on(\"connected\", () => setSocketConnected(true));\r\n    socket.on(\"typing\", () => setIsTyping(true));\r\n    socket.on(\"stop typing\", () => setIsTyping(false));\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchMessages();\r\n    selectedChatCompare = selectedChat;\r\n  }, [selectedChat]);\r\n\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessageRecieved) => {\r\n      if (\r\n        !selectedChatCompare ||\r\n        selectedChatCompare._id !== newMessageRecieved.chat._id\r\n      ) {\r\n        if (!notification.includes(newMessageRecieved)) {\r\n          setNotification([newMessageRecieved, ...notification]);\r\n          setFetchAgain(!fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessageRecieved]);\r\n      }\r\n    });\r\n  });\r\n\r\n  const typingHandler = (e) => {\r\n    setNewMessage(e.target.value);\r\n\r\n    if (!socketConnected) return;\r\n\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit(\"typing\", selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timerLength = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      var timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff >= timerLength && typing) {\r\n        socket.emit(\"stop typing\", selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timerLength);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              d={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => setSelectedChat(\"\")}\r\n            />\r\n            {messages && \r\n              (!selectedChat.isGroupChat ? (\r\n                <>\r\n                  {getSender(user, selectedChat.users)}\r\n                  <ProfileModal\r\n                    user={getSenderFull(user, selectedChat.users)}\r\n                  />\r\n                </>\r\n              ) : (\r\n                <>\r\n                  {selectedChat.chatName.toUpperCase()}\r\n                  <UpdateGroupChatModal\r\n                    fetchMessages={fetchMessages}\r\n                    fetchAgain={fetchAgain}\r\n                    setFetchAgain={setFetchAgain}\r\n                  />\r\n                </>\r\n              ))}\r\n          </Text>\r\n          <Box\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            justifyContent=\"flex-end\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            w=\"100%\"\r\n            h=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {loading ? (\r\n              <Spinner\r\n                size=\"xl\"\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n              />\r\n            ) : (\r\n              <div className=\"messages\">\r\n                <ScrollableChat messages={messages} />\r\n              </div>\r\n            )}\r\n\r\n            <FormControl\r\n              onKeyDown={sendMessage}\r\n              id=\"first-name\"\r\n              isRequired\r\n              mt={3}\r\n              d=\"flex\" \r\n              alignItems=\"center\" \r\n              justifyContent=\"center\"\r\n            >\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder={istyping ? \"Typing...\" : \"Enter a message...\"}\r\n                value={newMessage}\r\n                onChange={typingHandler}\r\n              />\r\n              {/* <Flex align=\"center\" w='1000px'bg=\"#E0E0E0\" borderRadius='5px'>\r\n                  <IconButton\r\n                    icon={<AttachmentIcon />}\r\n                    aria-label=\"Add File\"\r\n                    bg=\"chat.addButtonBackground\"\r\n                    size=\"sm\"\r\n                    h='40px'\r\n                    w='40px'\r\n                    mr=\"5px\"\r\n                  />\r\n                  <Input\r\n                    bg=\"transparent\"\r\n                    color=\"chat.textColor\"\r\n                    border=\"none\"\r\n                    h='40px'\r\n                    w='100%'\r\n                    mr=\"5px\"\r\n                    placeholder=\"Enter a message..\"\r\n                    value={newMessage}\r\n                    onChange={typingHandler}\r\n                  />\r\n                  <IconButton\r\n                    icon={<ArrowForwardIcon />}\r\n                    aria-label=\"Send Message\"\r\n                    bg=\"#70a1da\"\r\n                    size=\"sm\"\r\n                    h='40px'\r\n                    w='50px'\r\n                    onClick={sendMessage}\r\n                  />\r\n                </Flex> */}\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Click on a user to start chatting\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleChat;\r\n","export const isSameSenderMargin = (messages, m, i, userId) => {\r\n  if (\r\n    i < messages.length - 1 &&\r\n    messages[i + 1].sender._id === m.sender._id &&\r\n    messages[i].sender._id !== userId\r\n  )\r\n    return 33;\r\n  else if (\r\n    (i < messages.length - 1 &&\r\n      messages[i + 1].sender._id !== m.sender._id &&\r\n      messages[i].sender._id !== userId) ||\r\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\r\n  )\r\n    return 0;\r\n  else return \"auto\";\r\n};\r\n\r\nexport const isSameSender = (messages, m, i, userId) => {\r\n  return (\r\n    i < messages.length - 1 &&\r\n    (messages[i + 1].sender._id !== m.sender._id ||\r\n      messages[i + 1].sender._id === undefined) &&\r\n    messages[i].sender._id !== userId\r\n  );\r\n};\r\n\r\nexport const isLastMessage = (messages, i, userId) => {\r\n  return (\r\n    i === messages.length - 1 &&\r\n    messages[messages.length - 1].sender._id !== userId &&\r\n    messages[messages.length - 1].sender._id\r\n  );\r\n};\r\n\r\nexport const isSameUser = (messages, m, i) => {\r\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\r\n};\r\n\r\nexport const getSender = (loggedUser, users) => {\r\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\r\n};\r\n\r\nexport const getSenderFull = (loggedUser, users) => {\r\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\r\n};\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport ScrollableFeed from \"react-scrollable-feed\";\r\nimport {\r\n  isLastMessage,\r\n  isSameSender,\r\n  isSameSenderMargin,\r\n  isSameUser,\r\n} from \"../config/ChatLogics\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst ScrollableChat = ({ messages }) => {\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <ScrollableFeed>\r\n      {messages &&\r\n        messages.map((m, i) => (\r\n          <div style={{ display: \"flex\" }} key={m._id}>\r\n            {(isSameSender(messages, m, i, user._id) ||\r\n              isLastMessage(messages, i, user._id)) && (\r\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\r\n                <Avatar\r\n                  mt=\"7px\"\r\n                  mr={1}\r\n                  size=\"sm\"\r\n                  cursor=\"pointer\"\r\n                  name={m.sender.name}\r\n                  src={m.sender.pic}\r\n                />\r\n              </Tooltip>\r\n            )}\r\n            <span\r\n              style={{\r\n                backgroundColor: `${\r\n                  m.sender._id === user._id ? \"#BEE3F8\" : \"#55AAFF\"\r\n                }`,\r\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\r\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\r\n                borderRadius: \"20px\",\r\n                padding: \"5px 15px\",\r\n                maxWidth: \"75%\",\r\n              }}\r\n            >\r\n              {m.content}\r\n            </span>\r\n          </div>\r\n        ))}\r\n    </ScrollableFeed>\r\n  );\r\n};\r\n\r\nexport default ScrollableChat;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  IconButton,\r\n  Text,\r\n  Image,\r\n} from \"@chakra-ui/react\";\r\n\r\nconst ProfileModal = ({ user, children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n\r\n  return (\r\n    <>\r\n      {children ? (\r\n        <span onClick={onOpen}>{children}</span>\r\n      ) : (\r\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n      )}\r\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent h=\"410px\">\r\n          <ModalHeader\r\n            fontSize=\"40px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            {user.name}\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody\r\n            d=\"flex\"\r\n            flexDir=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Image\r\n              borderRadius=\"full\"\r\n              boxSize=\"150px\"\r\n              src={user.pic}\r\n              alt={user.name}\r\n            />\r\n            <Text\r\n              fontSize={{ base: \"28px\", md: \"30px\" }}\r\n              fontFamily=\"Work sans\"\r\n            >\r\n              Email: {user.email}\r\n            </Text>\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={onClose}>Close</Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ProfileModal;\r\n","import { CloseIcon } from \"@chakra-ui/icons\";\r\nimport { Badge } from \"@chakra-ui/layout\";\r\n\r\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\r\n  return (\r\n    <Badge\r\n      px={2}\r\n      py={1}\r\n      borderRadius=\"lg\"\r\n      m={1}\r\n      mb={2}\r\n      variant=\"solid\"\r\n      fontSize={12}\r\n      colorScheme=\"purple\"\r\n      cursor=\"pointer\"\r\n      onClick={handleFunction}\r\n    >\r\n      {user.name}\r\n      {admin === user._id && <span> (Admin)</span>}\r\n      <CloseIcon pl={1} />\r\n    </Badge>\r\n  );\r\n};\r\n\r\nexport default UserBadgeItem;\r\n","import { Avatar } from \"@chakra-ui/avatar\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\n\r\nconst UserListItem = ({ handleFunction, user }) => {\r\n  return (\r\n    <Box\r\n      onClick={handleFunction}\r\n      cursor=\"pointer\"\r\n      bg=\"#E8E8E8\"\r\n      _hover={{\r\n        background: \"#55AAFF\",\r\n        color: \"white\",\r\n      }}\r\n      w=\"100%\"\r\n      d=\"flex\"\r\n      alignItems=\"center\"\r\n      color=\"black\"\r\n      px={3}\r\n      py={2}\r\n      mb={2}\r\n      borderRadius=\"lg\"\r\n    >\r\n      <Avatar\r\n        mr={2}\r\n        size=\"sm\"\r\n        cursor=\"pointer\"\r\n        name={user.name}\r\n        src={user.pic}\r\n      />\r\n      <Box>\r\n        <Text>{user.name}</Text>\r\n        <Text fontSize=\"xs\">\r\n          <b>Email : </b>\r\n          {user.email}\r\n        </Text>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default UserListItem;\r\n","import { ViewIcon } from \"@chakra-ui/icons\";\r\nimport {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n  IconButton,\r\n  Spinner,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [renameloading, setRenameLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { selectedChat, setSelectedChat, user } = ChatState();\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await axios.get(`http://localhost:8000/api/user?search=${search}`, {withCredentials: true});\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleRename = async () => {\r\n    if (!groupChatName) return;\r\n\r\n    try {\r\n      setRenameLoading(true);\r\n      const { data } = await axios.put(\r\n        `http://localhost:8000/api/chat/rename`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          chatName: groupChatName,\r\n        },\r\n        {withCredentials : true}\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setRenameLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setRenameLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleAddUser = async (user1) => {\r\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\r\n      toast({\r\n        title: \"User Already in group!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (selectedChat.groupAdmin._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can add someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await axios.put(\r\n        `http://localhost:8000/api/chat/groupadd`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        {withCredentials: true}\r\n      );\r\n\r\n      setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  const handleRemove = async (user1) => {\r\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\r\n      toast({\r\n        title: \"Only admins can remove someone!\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await axios.put(\r\n        `http://localhost:8000/api/chat/groupremove`,\r\n        {\r\n          chatId: selectedChat._id,\r\n          userId: user1._id,\r\n        },\r\n        {withCredentials: true}\r\n      );\r\n\r\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\r\n      setFetchAgain(!fetchAgain);\r\n      fetchMessages();\r\n      setLoading(false);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: error.response.data.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n      setLoading(false);\r\n    }\r\n    setGroupChatName(\"\");\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\r\n        <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n          <ModalOverlay />\r\n          <ModalContent>\r\n            <ModalHeader\r\n              fontSize=\"35px\"\r\n              fontFamily=\"Work sans\"\r\n              d=\"flex\"\r\n              justifyContent=\"center\"\r\n            >\r\n              {selectedChat.chatName}\r\n            </ModalHeader>\r\n\r\n            <ModalCloseButton />\r\n            <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\"  maxH=\"70vh\">\r\n              <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\r\n                {selectedChat.users.map((u) => (\r\n                  <UserBadgeItem\r\n                    key={u._id}\r\n                    user={u}\r\n                    admin={selectedChat.groupAdmin}\r\n                    handleFunction={() => handleRemove(u)}\r\n                  />\r\n                ))}\r\n              </Box>\r\n              <FormControl d=\"flex\">\r\n                <Input\r\n                  placeholder=\"Chat Name\"\r\n                  mb={3}\r\n                  value={groupChatName}\r\n                  onChange={(e) => setGroupChatName(e.target.value)}\r\n                />\r\n                <Button\r\n                  variant=\"solid\"\r\n                  colorScheme=\"teal\"\r\n                  ml={1}\r\n                  isLoading={renameloading}\r\n                  onClick={handleRename}\r\n                >\r\n                  Update\r\n                </Button>\r\n              </FormControl>\r\n              <FormControl>\r\n                <Input\r\n                  placeholder=\"Add User to group\"\r\n                  mb={1}\r\n                  onChange={(e) => handleSearch(e.target.value)}\r\n                />\r\n              </FormControl>\r\n\r\n              <FormControl overflow = 'auto'>\r\n                {loading ? (\r\n                  <Spinner size=\"lg\" />\r\n                ) : (\r\n                  searchResult?.map((user) => (\r\n                    <UserListItem\r\n                      key={user._id}\r\n                      user={user}\r\n                      handleFunction={() => handleAddUser(user)}\r\n                    />\r\n                  ))\r\n                )}\r\n              </FormControl>\r\n            </ModalBody>\r\n            <ModalFooter>\r\n              <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\r\n                Leave Group\r\n              </Button>\r\n            </ModalFooter>\r\n          </ModalContent>\r\n        </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UpdateGroupChatModal;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport \"./styles.css\";\r\nimport SingleChat from \"./SingleChat\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\r\n  const { selectedChat } = ChatState();\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\r\n      alignItems=\"center\"\r\n      flexDir=\"column\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"68%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Chatbox;\r\n","import { Stack } from \"@chakra-ui/layout\";\r\nimport { Skeleton } from \"@chakra-ui/skeleton\";\r\n\r\nconst ChatLoading = () => {\r\n  return (\r\n    <Stack>\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n      <Skeleton height=\"45px\" />\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default ChatLoading;\r\n","import {\r\n  Modal,\r\n  ModalOverlay,\r\n  ModalContent,\r\n  ModalHeader,\r\n  ModalFooter,\r\n  ModalBody,\r\n  ModalCloseButton,\r\n  Button,\r\n  useDisclosure,\r\n  FormControl,\r\n  Input,\r\n  useToast,\r\n  Box,\r\n} from \"@chakra-ui/react\";\r\nimport axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\n\r\nconst GroupChatModal = ({ children }) => {\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const [groupChatName, setGroupChatName] = useState();\r\n  const [selectedUsers, setSelectedUsers] = useState([]);\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const toast = useToast();\r\n\r\n  const { chats, setChats } = ChatState();\r\n\r\n  const handleGroup = (userToAdd) => {\r\n    if (selectedUsers.includes(userToAdd)) {\r\n      toast({\r\n        title: \"User already added\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    setSelectedUsers([...selectedUsers, userToAdd]);\r\n  };\r\n\r\n  const handleSearch = async (query) => {\r\n    setSearch(query);\r\n    if (!query) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.get(`http://localhost:8000/api/user?search=${search}`, {withCredentials: true});\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleDelete = (delUser) => {\r\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    if (!groupChatName || !selectedUsers) {\r\n      toast({\r\n        title: \"Please fill all the feilds\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data } = await axios.post(\r\n        `http://localhost:8000/api/chat/group`,\r\n        {\r\n          name: groupChatName,\r\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\r\n        },{withCredentials: true}\r\n      );\r\n      setChats([data, ...chats]);\r\n      onClose();\r\n      toast({\r\n        title: \"New Group Chat Created!\",\r\n        status: \"success\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Failed to Create the Chat!\",\r\n        description: error.response.data,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <span onClick={onOpen}>{children}</span>\r\n\r\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\r\n        <ModalOverlay />\r\n        <ModalContent>\r\n          <ModalHeader\r\n            fontSize=\"35px\"\r\n            fontFamily=\"Work sans\"\r\n            d=\"flex\"\r\n            justifyContent=\"center\"\r\n          >\r\n            Create Group Chat\r\n          </ModalHeader>\r\n          <ModalCloseButton />\r\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Chat Name\"\r\n                mb={3}\r\n                onChange={(e) => setGroupChatName(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <FormControl>\r\n              <Input\r\n                placeholder=\"Add Users eg: John, Peter, Jane\"\r\n                mb={1}\r\n                onChange={(e) => handleSearch(e.target.value)}\r\n              />\r\n            </FormControl>\r\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\r\n              {selectedUsers.map((u) => (\r\n                <UserBadgeItem\r\n                  key={u._id}\r\n                  user={u}\r\n                  handleFunction={() => handleDelete(u)}\r\n                />\r\n              ))}\r\n            </Box>\r\n            {loading ? (\r\n              <div>Loading...</div>\r\n            ) : (\r\n              searchResult\r\n                ?.slice(0, 4)\r\n                .map((user) => (\r\n                  <UserListItem\r\n                    key={user._id}\r\n                    user={user}\r\n                    handleFunction={() => handleGroup(user)}\r\n                  />\r\n                ))\r\n            )}\r\n          </ModalBody>\r\n          <ModalFooter>\r\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\r\n              Create Chat\r\n            </Button>\r\n          </ModalFooter>\r\n        </ModalContent>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GroupChatModal;\r\n","import { AddIcon } from \"@chakra-ui/icons\";\r\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport axios from \"axios\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { getSender } from \"../config/ChatLogics\";\r\nimport ChatLoading from \"./ChatLoading\";\r\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\r\nimport { Button } from \"@chakra-ui/react\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst MyChats = ({ fetchAgain }) => {\r\n  const [loggedUser, setLoggedUser] = useState();\r\n\r\n  const { selectedChat, setSelectedChat, chats, setChats } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const fetchChats = async () => {\r\n    try {\r\n      const { data } = await axios.get(\"http://localhost:8000/api/chat\",{withCredentials:true});\r\n      setChats(data);\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the chats\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoggedUser(JSON.parse(localStorage.getItem(\"userInfo\")));\r\n    fetchChats();\r\n  }, [fetchAgain]);\r\n\r\n  return (\r\n    <Box\r\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\r\n      flexDir=\"column\"\r\n      alignItems=\"center\"\r\n      p={3}\r\n      bg=\"white\"\r\n      w={{ base: \"100%\", md: \"31%\" }}\r\n      borderRadius=\"lg\"\r\n      borderWidth=\"1px\"\r\n    >\r\n      <Box\r\n        pb={3}\r\n        px={3}\r\n        fontSize={{ base: \"28px\", md: \"30px\" }}\r\n        fontFamily=\"Work sans\"\r\n        d=\"flex\"\r\n        w=\"100%\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        My Chats\r\n        <GroupChatModal>\r\n          <Button\r\n            d=\"flex\"\r\n            fontSize={{ base: \"17px\", md: \"10px\", lg: \"17px\" }}\r\n            rightIcon={<AddIcon />}\r\n          >\r\n            New Group Chat\r\n          </Button>\r\n        </GroupChatModal>\r\n      </Box>\r\n      <Box\r\n        d=\"flex\"\r\n        flexDir=\"column\"\r\n        p={3}\r\n        bg=\"#F8F8F8\"\r\n        w=\"100%\"\r\n        h=\"100%\"\r\n        borderRadius=\"lg\"\r\n        overflowY=\"hidden\"\r\n      >\r\n        {chats ? (\r\n          <Stack overflowY=\"scroll\">\r\n            {chats.map((chat) => (\r\n              <Box\r\n                onClick={() => setSelectedChat(chat)}\r\n                cursor=\"pointer\"\r\n                bg={selectedChat === chat ? \"#55AAFF\" : \"#E8E8E8\"}\r\n                color={selectedChat === chat ? \"white\" : \"black\"}\r\n                px={3}\r\n                py={2}\r\n                borderRadius=\"lg\"\r\n                key={chat._id}\r\n              >\r\n                <Text>\r\n                  {!chat.isGroupChat\r\n                    ? getSender(loggedUser, chat.users)\r\n                    : chat.chatName}\r\n                </Text>\r\n                {chat.latestMessage && (\r\n                  <Text fontSize=\"xs\">\r\n                    <b>{chat.latestMessage.sender.name} : </b>\r\n                    {chat.latestMessage.content.length > 50\r\n                      ? chat.latestMessage.content.substring(0, 51) + \"...\"\r\n                      : chat.latestMessage.content}\r\n                  </Text>\r\n                )}\r\n              </Box>\r\n            ))}\r\n          </Stack>\r\n        ) : (\r\n          <ChatLoading />\r\n        )}\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default MyChats;\r\n","import { Button } from \"@chakra-ui/button\";\r\nimport { useDisclosure } from \"@chakra-ui/hooks\";\r\nimport { Input } from \"@chakra-ui/input\";\r\nimport { Box, Text } from \"@chakra-ui/layout\";\r\nimport {\r\n  Menu,\r\n  MenuButton,\r\n  MenuDivider,\r\n  MenuItem,\r\n  MenuList,\r\n} from \"@chakra-ui/menu\";\r\nimport {\r\n  Drawer,\r\n  DrawerBody,\r\n  DrawerContent,\r\n  DrawerHeader,\r\n  DrawerOverlay,\r\n} from \"@chakra-ui/modal\";\r\nimport { Tooltip } from \"@chakra-ui/tooltip\";\r\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\r\nimport { Avatar } from \"@chakra-ui/avatar\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useToast } from \"@chakra-ui/toast\";\r\nimport ChatLoading from \"../ChatLoading\";\r\nimport { Spinner } from \"@chakra-ui/spinner\";\r\n\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport NotificationBadge from \"react-notification-badge\";\r\nimport { Effect } from \"react-notification-badge\";\r\nimport { getSender } from \"../../config/ChatLogics\";\r\nimport UserListItem from \"../userAvatar/UserListItem\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\n\r\nfunction SideDrawer() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [searchResult, setSearchResult] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [loadingChat, setLoadingChat] = useState(false);\r\n\r\n  const {\r\n    setSelectedChat,\r\n    user,\r\n    notification,\r\n    setNotification,\r\n    chats,\r\n    setChats,\r\n  } = ChatState();\r\n\r\n  const toast = useToast();\r\n  const { isOpen, onOpen, onClose } = useDisclosure();\r\n  const history = useHistory();\r\n\r\n  const logoutHandler = () => {\r\n    localStorage.removeItem(\"userInfo\");\r\n    setSelectedChat(null);\r\n    setChats(null);\r\n    setNotification([]);\r\n    history.push(\"/\");\r\n  };\r\n\r\n  const handleSearch = async () => {\r\n    if (!search) {\r\n      toast({\r\n        title: \"Please Enter something in search\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setLoading(true);\r\n      const { data } = await axios.get(`http://localhost:8000/api/user?search=${search}`,{withCredentials:true} );\r\n      setLoading(false);\r\n      setSearchResult(data);\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error Occured!\",\r\n        description: \"Failed to Load the Search Results\",\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const accessChat = async (userId) => {\r\n    try {\r\n      setLoadingChat(true);\r\n      const { data } = await axios.post(`http://localhost:8000/api/chat`, { userId }, {withCredentials: true});\r\n\r\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\r\n      setSelectedChat(data);\r\n      setLoadingChat(false);\r\n      onClose();\r\n\r\n    } catch (error) {\r\n      toast({\r\n        title: \"Error fetching the chat\",\r\n        description: error.message,\r\n        status: \"error\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"bottom-left\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box\r\n        d=\"flex\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        bg=\"white\"\r\n        w=\"100%\"\r\n        p=\"5px 10px 5px 10px\"\r\n        borderWidth=\"5px\"\r\n      >\r\n        <Tooltip label=\"Search Users to chat\" hasArrow placement=\"bottom-end\">\r\n          <Button variant=\"ghost\" onClick={onOpen}>\r\n            <i className=\"fas fa-search\"></i>\r\n            <Text d={{ base: \"none\", md: \"flex\" }} px={4}>\r\n              Search User\r\n            </Text>\r\n          </Button>\r\n        </Tooltip>\r\n        <Text fontSize=\"2xl\" fontFamily=\"Work sans\">\r\n          Chat App\r\n        </Text>\r\n        <div>\r\n          <Menu>\r\n            <MenuButton p={1}>\r\n              <NotificationBadge\r\n                count={notification.length}\r\n                effect={Effect.SCALE}\r\n              />\r\n              <BellIcon fontSize=\"2xl\" m={1} />\r\n            </MenuButton>\r\n            <MenuList pl={2}>\r\n              {!notification.length && \"No New Messages\"}\r\n              {notification.map((notif) => (\r\n                <MenuItem\r\n                  key={notif._id}\r\n                  onClick={() => {\r\n                    setSelectedChat(notif.chat);\r\n                    setNotification(notification.filter((n) => n !== notif));\r\n                  }}\r\n                >\r\n                  {notif.chat.isGroupChat\r\n                    ? `New Message in ${notif.chat.chatName}`\r\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\r\n                </MenuItem>\r\n              ))}\r\n            </MenuList>\r\n          </Menu>\r\n          <Menu>\r\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\r\n              <Avatar\r\n                size=\"sm\"\r\n                cursor=\"pointer\"\r\n                name={user.name}\r\n                src={user.pic}\r\n              />\r\n            </MenuButton>\r\n            <MenuList>\r\n              <ProfileModal user={user}>\r\n                <MenuItem>My Profile</MenuItem>{\" \"}\r\n              </ProfileModal>\r\n              <MenuDivider />\r\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\r\n            </MenuList>\r\n          </Menu>\r\n        </div>\r\n      </Box>\r\n\r\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\r\n        <DrawerOverlay />\r\n        <DrawerContent>\r\n          <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\r\n          <DrawerBody>\r\n            <Box d=\"flex\" pb={2}>\r\n              <Input\r\n                placeholder=\"Search by name or email\"\r\n                mr={2}\r\n                value={search}\r\n                onChange={(e) => setSearch(e.target.value)}\r\n              />\r\n              <Button onClick={handleSearch}>Search</Button>\r\n            </Box>\r\n            {loading ? (\r\n              <ChatLoading />\r\n            ) : (\r\n              searchResult?.map((User) => (\r\n                <UserListItem\r\n                  key={User._id}\r\n                  user={User}\r\n                  handleFunction={() => accessChat(User._id)}\r\n                />\r\n              ))\r\n            )}\r\n            {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\r\n          </DrawerBody>\r\n        </DrawerContent>\r\n      </Drawer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SideDrawer;\r\n","import { Box } from \"@chakra-ui/layout\";\r\nimport { useState } from \"react\";\r\nimport Chatbox from \"../components/Chatbox\";\r\nimport MyChats from \"../components/MyChats\";\r\nimport SideDrawer from \"../components/miscellaneous/SideDrawer\";\r\nimport { ChatState } from \"../Context/ChatProvider\";\r\n\r\nconst Chatpage = () => {\r\n  const [fetchAgain, setFetchAgain] = useState(false);\r\n  const { user } = ChatState();\r\n\r\n  return (\r\n    <div style={{ width: \"100%\" }}>\r\n      {user && <SideDrawer />}\r\n      <Box d=\"flex\" justifyContent=\"space-between\" w=\"100%\" h=\"91.5vh\" p=\"10px\">\r\n        {user && <MyChats fetchAgain={fetchAgain} />}\r\n        {user && (\r\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\r\n        )}\r\n      </Box>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatpage;\r\n","import \"./App.css\";\r\nimport Homepage from \"./Pages/Homepage\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Chatpage from \"./Pages/Chatpage\";\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Route path=\"/\" component={Homepage} exact />\r\n      <Route path=\"/chats\" component={Chatpage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { ChakraProvider } from \"@chakra-ui/react\";\r\nimport ChatProvider from \"./Context/ChatProvider\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport { createRoot } from 'react-dom/client';\r\nconst container = document.getElementById('app');\r\nconst root = createRoot(container);\r\nroot.render(\r\n  <ChakraProvider>\r\n    <BrowserRouter>\r\n      <ChatProvider>\r\n        <App />\r\n      </ChatProvider>\r\n    </BrowserRouter>\r\n  </ChakraProvider>\r\n);\r\n"],"sourceRoot":""}